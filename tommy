<h1>Welcome to the Monster Code Camp</h1>

<img src="../images/monster.png" height="350" style="display:block">
===

Oh no, Batman got captured by a scary monster. Batman must
feed the monster so the monster doesn't get hungry. The following code
tells Batman to feed the monster. Press run to see what happens.

===


Congratulations, Batman survived the first day! Batman
woke up the second day and tries to feed the monster again, the monster
is not hungry and got mad at Batman. The monster tells Batman
that is Batman feed the monster again when the monster is not 
hungry, the monster is going to eat Batman. Batman needs
to ask the monster if the monster is hungry before trying to feed it.
<pre>
we can use the ask instruction to ask a question. 
    ask (question)
    yes: 
        (yes action)
    no: 
        (no action)
</pre>
If the answer is yes, Batman will do the yes action,
If the answer is no, Batman will do the no action

Can you ensure Batman feed the monster only when monster if hungry?

===

The monster wants Batman to pick some fruits for the monster to eat.
The monster gave Batman some Post-it notes to write down the number
of each fruits to buy. You can write down a number on a Post-it note
using the = instruction.
<pre>
apples = 3
</pre>
This writes down the number three on a Post-it note with the label apple.


The monster wants 13 apples and 7 bananas, Write these down on Post-it notes
so Batman can remember later.


===



Each time Batman feeds the monster a fruit, he should update the Post-it
notes. He can do this using the = instruction.

<pre>
apples = apples - 1
</pre>

This says, examine the current number written on the apples post-it note,
erase what is written on the post-it note, then write down the number
minus one.

Write 20 onto post-it note labeled apple then decrease the number on the 
post it note by 3.

===

The monster woke up very hungry, Batman must feed the monster 20 times or else
he will be eaten, to do this, we write the instruction feed_monster 20 times,
But this is very long and we might miscount the number times we feed the monster
which will cause Batman to get eaten. Instead, lets use a loop.

A loop is something that execute a instruction multiple times, lets look
at the repeat until loop:

<pre>
feed = 20
repeat until: feed is 0
no:
    feed_monster
    feed = feed - 1
</pre>

What happened here? Well we first write down the number of times we need to
feed the monster on a post-it note. Then we check if the Post-it note to see if
the number of times we still have to feed the monster is 0. If the answer is yes, 
we move on with our lives. However, if the answer is yes, we must feed the 
monster, and then update the Post-it note. We decrease the number on the 
post-it note labeled feed by one. 

===


After living with the monster for a while, Batman is beginning to understand
the monster's habits. everyday Batman needs to pick 13 apples and 7 bananas.
Batman then needs to try to feed the monster 20 times. each time Batman must
check if the monster is actually hungry and only feed the monster if the monster
is actually hungry.

Batman decided to escaped from the monster. in case someone else is captured
by the monster, Batman decided to write down the recipes to keep the monster
happy.

You can write a recipe using the following syntax:

<pre>
recipe pick_23_apples:
    apples = 23
    repeat until: apples is 0
        pick apples
        apples = apples - 1
</pre>

This creates a recipe labeled pick_23_apples, and give the instruction
to pick, you guessed it, 23 apples.

Write down the recipe for keeping the monster happy

===

<h1>Congratulations, you are finished! :)</h1>
<h2>Feel free to experiment with the language on your own now.</h2>

===
